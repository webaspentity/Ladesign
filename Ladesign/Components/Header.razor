@inject IJSRuntime js

<header class=@cssClass id="header">
    <Container>
        <Logo />
        <Menu @ref=menu MenuLinkClick="LinkClick" />
        <Telephone />
        <Burger OnClick="ToggleMenu" @ref=burger />
    </Container>
</header>

@code {
    private string cssClass = "header";
    private Menu? menu;
    private Burger? burger;
    private DotNetObjectReference<Header> refHeader;

    [Parameter]
    public string? Class
    {
        get => cssClass;
        set
        {
            if (!cssClass.Contains(value))
            {
                cssClass = cssClass + $" {value}";
            }
        }
    }

    [JSInvokable("ToggleMenu")]
    public void ToggleMenu()
    {
        burger?.ToggleBurger();
        menu?.ToggleMenu();
    }

    private async Task SetHeaderFixed()
    {
        await js.InvokeVoidAsync("setHeaderFixed");
    }

    private async void LinkClick()
    {
        if (burger.Active)
        {
            ToggleMenu();
        }

        if (!cssClass.Contains("fixed"))
        {
            cssClass = cssClass + " fixed";
        }

        await SetHeaderFixed();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            refHeader = DotNetObjectReference.Create(this);
            js.InvokeVoidAsync("setHeader", refHeader);
        }
    }

    [JSInvokable("Refresh")]
    public void Refresh()
    {
        burger?.Refresh();
    }

}
